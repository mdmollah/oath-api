'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _helpers = require('../../formatter/helpers');

var _stack_trace_filter = require('../stack_trace_filter');

var _stack_trace_filter2 = _interopRequireDefault(_stack_trace_filter);

var _user_code_runner = require('../../user_code_runner');

var _user_code_runner2 = _interopRequireDefault(_user_code_runner);

var _verror = require('verror');

var _verror2 = _interopRequireDefault(_verror);

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _readline = require('readline');

var _readline2 = _interopRequireDefault(_readline);

var _command_types = require('./command_types');

var _command_types2 = _interopRequireDefault(_command_types);

var _attachment_manager = require('../attachment_manager');

var _attachment_manager2 = _interopRequireDefault(_attachment_manager);

var _step_arguments = require('../../step_arguments');

var _data_table = require('../../models/data_table');

var _data_table2 = _interopRequireDefault(_data_table);

var _step_runner = require('../step_runner');

var _step_runner2 = _interopRequireDefault(_step_runner);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _pickle_runner = require('../../pickle_runner');

var pickleRunner = _interopRequireWildcard(_pickle_runner);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Runtime = function () {
  // featuresConfig - {absolutePaths, defaultLanguage, orderSeed, filters}
  //   filters - {names, lines, tagExpression}
  //     lines - { [featurePath]: [line1, line2, ...], ... }
  // runtimeConfig - {isDryRun, isFailFast, isStrict}
  function Runtime(_ref) {
    var cwd = _ref.cwd,
        eventBroadcaster = _ref.eventBroadcaster,
        featuresConfig = _ref.featuresConfig,
        runtimeConfig = _ref.runtimeConfig,
        stepDefinitionSnippetBuilder = _ref.stepDefinitionSnippetBuilder,
        supportCodeLibrary = _ref.supportCodeLibrary,
        filterStacktraces = _ref.filterStacktraces,
        worldParameters = _ref.worldParameters;
    (0, _classCallCheck3.default)(this, Runtime);

    this.cwd = cwd;
    this.eventBroadcaster = eventBroadcaster;
    this.featuresConfig = featuresConfig;
    this.runtimeConfig = runtimeConfig;
    this.filterStacktraces = filterStacktraces;
    this.stackTraceFilter = new _stack_trace_filter2.default();
    this.stepDefinitionSnippetBuilder = stepDefinitionSnippetBuilder;
    this.supportCodeLibrary = supportCodeLibrary;
    this.worldParameters = worldParameters;
    this.testCases = {};
  }

  (0, _createClass3.default)(Runtime, [{
    key: 'getStepParameters',
    value: function () {
      var _ref3 = (0, _bluebird.coroutine)(function* (_ref2) {
        var patternMatches = _ref2.patternMatches,
            pickleArguments = _ref2.pickleArguments,
            parameterTypeNameToTransform = _ref2.parameterTypeNameToTransform,
            world = _ref2.world;

        var stepPatternParameters = yield _bluebird2.default.map(patternMatches, function (_ref4) {
          var captures = _ref4.captures,
              parameterTypeName = _ref4.parameterTypeName;

          var transform = parameterTypeNameToTransform[parameterTypeName] || function (c) {
            return c;
          };
          return _bluebird2.default.resolve(transform.apply(world, captures));
        });
        var iterator = (0, _step_arguments.buildStepArgumentIterator)({
          dataTable: function dataTable(arg) {
            return new _data_table2.default(arg);
          },
          docString: function docString(arg) {
            return arg.content;
          }
        });
        var stepArgumentParameters = pickleArguments.map(iterator);
        return stepPatternParameters.concat(stepArgumentParameters);
      });

      function getStepParameters(_x) {
        return _ref3.apply(this, arguments);
      }

      return getStepParameters;
    }()
  }, {
    key: 'runTestRunHooks',
    value: function () {
      var _ref5 = (0, _bluebird.coroutine)(function* (key, name) {
        var _this = this;

        yield _bluebird2.default.each(this.supportCodeLibrary[key], function () {
          var _ref6 = (0, _bluebird.coroutine)(function* (hookDefinition) {
            var _ref7 = yield _user_code_runner2.default.run({
              argsArray: [],
              fn: hookDefinition.code,
              thisArg: null,
              timeoutInMilliseconds: hookDefinition.options.timeout || _this.supportCodeLibrary.defaultTimeout
            }),
                error = _ref7.error;

            if (error) {
              var location = (0, _helpers.formatLocation)(hookDefinition, _this.cwd);
              throw new _verror2.default(error, name + ' hook errored, process exiting: ' + location);
            }
          });

          return function (_x4) {
            return _ref6.apply(this, arguments);
          };
        }());
      });

      function runTestRunHooks(_x2, _x3) {
        return _ref5.apply(this, arguments);
      }

      return runTestRunHooks;
    }()
  }, {
    key: 'runBeforeTestCaseHook',
    value: function runBeforeTestCaseHook(_ref8) {
      var testCaseId = _ref8.testCaseId,
          testCaseHookDefinitionId = _ref8.testCaseHookDefinitionId;
      var _testCases$testCaseId = this.testCases[testCaseId],
          world = _testCases$testCaseId.world,
          pickle = _testCases$testCaseId.pickle,
          testCase = _testCases$testCaseId.testCase;

      return _step_runner2.default.run({
        defaultTimeout: this.supportCodeLibrary.defaultTimeout,
        generateParametersFn: function generateParametersFn() {
          return [{ sourceLocation: testCase.sourceLocation, pickle: pickle }];
        },
        stepDefinition: _lodash2.default.find(this.supportCodeLibrary.beforeTestCaseHookDefinitions, ['id', testCaseHookDefinitionId]),
        world: world
      });
    }
  }, {
    key: 'runAfterTestCaseHook',
    value: function runAfterTestCaseHook(_ref9) {
      var testCaseId = _ref9.testCaseId,
          testCaseHookDefinitionId = _ref9.testCaseHookDefinitionId,
          result = _ref9.result;
      var _testCases$testCaseId2 = this.testCases[testCaseId],
          world = _testCases$testCaseId2.world,
          pickle = _testCases$testCaseId2.pickle,
          testCase = _testCases$testCaseId2.testCase;

      return _step_runner2.default.run({
        defaultTimeout: this.supportCodeLibrary.defaultTimeout,
        generateParametersFn: function generateParametersFn() {
          return [{ sourceLocation: testCase.sourceLocation, pickle: pickle, result: result }];
        },
        stepDefinition: _lodash2.default.find(this.supportCodeLibrary.afterTestCaseHookDefinitions, ['id', testCaseHookDefinitionId]),
        world: world
      });
    }
  }, {
    key: 'runStep',
    value: function () {
      var _ref11 = (0, _bluebird.coroutine)(function* (_ref10) {
        var _this2 = this;

        var testCaseId = _ref10.testCaseId,
            stepDefinitionId = _ref10.stepDefinitionId,
            pickleArguments = _ref10.pickleArguments,
            patternMatches = _ref10.patternMatches;

        var generateParametersFn = function generateParametersFn() {
          return _this2.getStepParameters({
            pickleArguments: pickleArguments,
            patternMatches: patternMatches,
            parameterTypeNameToTransform: _this2.supportCodeLibrary.parameterTypeNameToTransform,
            world: _this2.testCases[testCaseId].world
          });
        };
        return _step_runner2.default.run({
          defaultTimeout: this.supportCodeLibrary.defaultTimeout,
          generateParametersFn: generateParametersFn,
          stepDefinition: _lodash2.default.find(this.supportCodeLibrary.stepDefinitions, ['id', stepDefinitionId]),
          world: this.testCases[testCaseId].world
        });
      });

      function runStep(_x5) {
        return _ref11.apply(this, arguments);
      }

      return runStep;
    }()
  }, {
    key: 'parseCommand',
    value: function () {
      var _ref12 = (0, _bluebird.coroutine)(function* (line, done) {
        var _this3 = this;

        var command = JSON.parse(line);
        switch (command.type) {
          case _command_types2.default.RUN_BEFORE_TEST_RUN_HOOKS:
            yield this.runTestRunHooks('beforeTestRunHookDefinitions', 'a BeforeAll');
            this.sendActionComplete({ responseTo: command.id });
            break;
          case _command_types2.default.RUN_AFTER_TEST_RUN_HOOKS:
            yield this.runTestRunHooks('afterTestRunHookDefinitions', 'an AfterAll');
            this.sendActionComplete({ responseTo: command.id });
            break;
          case _command_types2.default.INITIALIZE_TEST_CASE:
            var attachmentManager = new _attachment_manager2.default(function (_ref13) {
              var data = _ref13.data,
                  media = _ref13.media;

              _this3.eventBroadcaster.emit('test-step-attachment', {
                index: _this3.testCases[command.testCaseId].currentStepIndex,
                testCase: command.testCase,
                data: data,
                media: media
              });
            });
            this.testCases[command.testCaseId] = {
              currentStepIndex: 0,
              testCase: command.testCase,
              pickle: command.pickle,
              world: new this.supportCodeLibrary.World({
                attach: attachmentManager.create.bind(attachmentManager),
                parameters: this.worldParameters
              })
            };
            this.sendActionComplete({ responseTo: command.id });
            break;
          case _command_types2.default.RUN_BEFORE_TEST_CASE_HOOK:
            var beforeHookResult = yield this.runBeforeTestCaseHook(command);
            this.testCases[command.testCaseId].currentStepIndex += 1;
            this.sendActionComplete({
              responseTo: command.id,
              result: beforeHookResult
            });
            break;
          case _command_types2.default.RUN_AFTER_TEST_CASE_HOOK:
            var afterHookResult = yield this.runAfterTestCaseHook(command);
            this.testCases[command.testCaseId].currentStepIndex += 1;
            this.sendActionComplete({
              responseTo: command.id,
              result: afterHookResult
            });
            break;
          case _command_types2.default.RUN_TEST_STEP:
            var stepResult = yield this.runStep(command);
            this.testCases[command.testCaseId].currentStepIndex += 1;
            this.sendActionComplete({
              responseTo: command.id,
              result: stepResult
            });
            break;
          case _command_types2.default.GENERATE_SNIPPET:
            this.sendActionComplete({
              responseTo: command.id,
              snippet: this.stepDefinitionSnippetBuilder.build(command)
            });
            break;
          case _command_types2.default.EVENT:
            this.eventBroadcaster.emit(command.event.type, command.event);
            if (command.event.type === 'test-run-finished') {
              this.result = command.event.result;
              this.pickleRunner.stdin.end();
            }
            if (command.event.type === 'attachment' && command.event.media.type === 'text/x.cucumber.stacktrace+plain') {
              throw new Error('Parse error in \'' + _path2.default.relative(this.cwd, command.event.source.uri) + '\': ' + command.event.data);
            }
            break;
          case _command_types2.default.ERROR:
            throw new Error(command.error);
          default:
            throw new Error('Unexpected message from pickle runner: ' + line);
        }
      });

      function parseCommand(_x6, _x7) {
        return _ref12.apply(this, arguments);
      }

      return parseCommand;
    }()
  }, {
    key: 'sendActionComplete',
    value: function sendActionComplete() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this.pickleRunner.stdin.write(JSON.stringify((0, _extends3.default)({
        command: _command_types2.default.ACTION_COMPLETE
      }, data)) + '\n');
    }
  }, {
    key: 'run',
    value: function run() {
      var _this4 = this;

      return new _bluebird2.default(function (resolve, reject) {
        if (_this4.filterStacktraces) {
          _this4.stackTraceFilter.filter();
        }
        _this4.pickleRunner = _child_process2.default.spawn(pickleRunner.getBinaryLocalPath(), [], {
          stdio: ['pipe', 'pipe', process.stderr]
        });
        _this4.pickleRunner.on('exit', function () {
          if (!_this4.result) {
            reject(new Error('Pickle runner exited unexpectedly'));
            return;
          }
          if (_this4.filterStacktraces) {
            _this4.stackTraceFilter.unfilter();
          }
          resolve(_this4.result.success);
        });
        var rl = _readline2.default.createInterface({ input: _this4.pickleRunner.stdout });
        rl.on('line', function () {
          var _ref14 = (0, _bluebird.coroutine)(function* (line) {
            try {
              yield _this4.parseCommand(line);
            } catch (error) {
              reject(error);
              _this4.pickleRunner.kill();
            }
          });

          return function (_x9) {
            return _ref14.apply(this, arguments);
          };
        }());
        rl.on('close', function () {
          if (!_this4.result) {
            reject(new Error('Pickle runner closed stdout unexpectedly'));
          }
        });
        _this4.pickleRunner.stdin.write(JSON.stringify({
          baseDirectory: _this4.cwd,
          featuresConfig: _this4.featuresConfig,
          runtimeConfig: _this4.runtimeConfig,
          supportCodeConfig: {
            afterTestCaseHookDefinitions: _this4.supportCodeLibrary.afterTestCaseHookDefinitions.map(function (d) {
              return d.toConfig();
            }),
            beforeTestCaseHookDefinitions: _this4.supportCodeLibrary.beforeTestCaseHookDefinitions.map(function (d) {
              return d.toConfig();
            }),
            parameterTypes: _this4.supportCodeLibrary.parameterTypes,
            stepDefinitions: _this4.supportCodeLibrary.stepDefinitions.map(function (d) {
              return d.toConfig();
            })
          },
          type: 'start'
        }) + '\n');
      });
    }
  }]);
  return Runtime;
}();

exports.default = Runtime;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,