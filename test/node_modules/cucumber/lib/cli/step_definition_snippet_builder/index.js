'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _step_arguments = require('../../step_arguments');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var StepDefinitionSnippetBuilder = function () {
  function StepDefinitionSnippetBuilder(_ref) {
    var snippetSyntax = _ref.snippetSyntax;
    (0, _classCallCheck3.default)(this, StepDefinitionSnippetBuilder);

    this.snippetSyntax = snippetSyntax;
  }

  (0, _createClass3.default)(StepDefinitionSnippetBuilder, [{
    key: 'parameterTypeNamesToParameterNames',
    value: function parameterTypeNamesToParameterNames(parameterTypeNames) {
      var mapping = {};
      return parameterTypeNames.map(function (typeName) {
        if (!mapping[typeName]) {
          mapping[typeName] = 1;
        }
        var result = '' + typeName + mapping[typeName];
        mapping[typeName] += 1;
        return result;
      });
    }
  }, {
    key: 'build',
    value: function build(_ref2) {
      var _this = this;

      var generatedExpressions = _ref2.generatedExpressions,
          pickleArguments = _ref2.pickleArguments;

      var updatedGeneratedExpressions = generatedExpressions.map(function (_ref3) {
        var text = _ref3.text,
            parameterTypeNames = _ref3.parameterTypeNames;

        return {
          text: text,
          parameterNames: _this.parameterTypeNamesToParameterNames(parameterTypeNames)
        };
      });
      var comment = 'Write code here that turns the phrase above into concrete actions';
      var stepParameterNames = pickleArguments.map((0, _step_arguments.buildStepArgumentIterator)({
        dataTable: function dataTable() {
          return 'dataTable';
        },
        docString: function docString() {
          return 'docString';
        }
      }));
      return this.snippetSyntax.build({
        comment: comment,
        generatedExpressions: updatedGeneratedExpressions,
        stepParameterNames: stepParameterNames
      });
    }
  }]);
  return StepDefinitionSnippetBuilder;
}();

exports.default = StepDefinitionSnippetBuilder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGkvc3RlcF9kZWZpbml0aW9uX3NuaXBwZXRfYnVpbGRlci9pbmRleC5qcyJdLCJuYW1lcyI6WyJTdGVwRGVmaW5pdGlvblNuaXBwZXRCdWlsZGVyIiwic25pcHBldFN5bnRheCIsInBhcmFtZXRlclR5cGVOYW1lcyIsIm1hcHBpbmciLCJtYXAiLCJ0eXBlTmFtZSIsInJlc3VsdCIsImdlbmVyYXRlZEV4cHJlc3Npb25zIiwicGlja2xlQXJndW1lbnRzIiwidXBkYXRlZEdlbmVyYXRlZEV4cHJlc3Npb25zIiwidGV4dCIsInBhcmFtZXRlck5hbWVzIiwicGFyYW1ldGVyVHlwZU5hbWVzVG9QYXJhbWV0ZXJOYW1lcyIsImNvbW1lbnQiLCJzdGVwUGFyYW1ldGVyTmFtZXMiLCJkYXRhVGFibGUiLCJkb2NTdHJpbmciLCJidWlsZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztJQUVxQkEsNEI7QUFDbkIsOENBQStCO0FBQUEsUUFBakJDLGFBQWlCLFFBQWpCQSxhQUFpQjtBQUFBOztBQUM3QixTQUFLQSxhQUFMLEdBQXFCQSxhQUFyQjtBQUNEOzs7O3VEQUVrQ0Msa0IsRUFBb0I7QUFDckQsVUFBTUMsVUFBVSxFQUFoQjtBQUNBLGFBQU9ELG1CQUFtQkUsR0FBbkIsQ0FBdUIsb0JBQVk7QUFDeEMsWUFBSSxDQUFDRCxRQUFRRSxRQUFSLENBQUwsRUFBd0I7QUFDdEJGLGtCQUFRRSxRQUFSLElBQW9CLENBQXBCO0FBQ0Q7QUFDRCxZQUFNQyxjQUFZRCxRQUFaLEdBQXVCRixRQUFRRSxRQUFSLENBQTdCO0FBQ0FGLGdCQUFRRSxRQUFSLEtBQXFCLENBQXJCO0FBQ0EsZUFBT0MsTUFBUDtBQUNELE9BUE0sQ0FBUDtBQVFEOzs7aUNBRWdEO0FBQUE7O0FBQUEsVUFBekNDLG9CQUF5QyxTQUF6Q0Esb0JBQXlDO0FBQUEsVUFBbkJDLGVBQW1CLFNBQW5CQSxlQUFtQjs7QUFDL0MsVUFBTUMsOEJBQThCRixxQkFBcUJILEdBQXJCLENBQ2xDLGlCQUFrQztBQUFBLFlBQS9CTSxJQUErQixTQUEvQkEsSUFBK0I7QUFBQSxZQUF6QlIsa0JBQXlCLFNBQXpCQSxrQkFBeUI7O0FBQ2hDLGVBQU87QUFDTFEsb0JBREs7QUFFTEMsMEJBQWdCLE1BQUtDLGtDQUFMLENBQ2RWLGtCQURjO0FBRlgsU0FBUDtBQU1ELE9BUmlDLENBQXBDO0FBVUEsVUFBTVcsVUFDSixtRUFERjtBQUVBLFVBQU1DLHFCQUFxQk4sZ0JBQWdCSixHQUFoQixDQUN6QiwrQ0FBMEI7QUFDeEJXLG1CQUFXO0FBQUEsaUJBQU0sV0FBTjtBQUFBLFNBRGE7QUFFeEJDLG1CQUFXO0FBQUEsaUJBQU0sV0FBTjtBQUFBO0FBRmEsT0FBMUIsQ0FEeUIsQ0FBM0I7QUFNQSxhQUFPLEtBQUtmLGFBQUwsQ0FBbUJnQixLQUFuQixDQUF5QjtBQUM5Qkosd0JBRDhCO0FBRTlCTiw4QkFBc0JFLDJCQUZRO0FBRzlCSztBQUg4QixPQUF6QixDQUFQO0FBS0Q7Ozs7O2tCQXpDa0JkLDRCIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnVpbGRTdGVwQXJndW1lbnRJdGVyYXRvciB9IGZyb20gJy4uLy4uL3N0ZXBfYXJndW1lbnRzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGVwRGVmaW5pdGlvblNuaXBwZXRCdWlsZGVyIHtcbiAgY29uc3RydWN0b3IoeyBzbmlwcGV0U3ludGF4IH0pIHtcbiAgICB0aGlzLnNuaXBwZXRTeW50YXggPSBzbmlwcGV0U3ludGF4XG4gIH1cblxuICBwYXJhbWV0ZXJUeXBlTmFtZXNUb1BhcmFtZXRlck5hbWVzKHBhcmFtZXRlclR5cGVOYW1lcykge1xuICAgIGNvbnN0IG1hcHBpbmcgPSB7fVxuICAgIHJldHVybiBwYXJhbWV0ZXJUeXBlTmFtZXMubWFwKHR5cGVOYW1lID0+IHtcbiAgICAgIGlmICghbWFwcGluZ1t0eXBlTmFtZV0pIHtcbiAgICAgICAgbWFwcGluZ1t0eXBlTmFtZV0gPSAxXG4gICAgICB9XG4gICAgICBjb25zdCByZXN1bHQgPSBgJHt0eXBlTmFtZX0ke21hcHBpbmdbdHlwZU5hbWVdfWBcbiAgICAgIG1hcHBpbmdbdHlwZU5hbWVdICs9IDFcbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9KVxuICB9XG5cbiAgYnVpbGQoeyBnZW5lcmF0ZWRFeHByZXNzaW9ucywgcGlja2xlQXJndW1lbnRzIH0pIHtcbiAgICBjb25zdCB1cGRhdGVkR2VuZXJhdGVkRXhwcmVzc2lvbnMgPSBnZW5lcmF0ZWRFeHByZXNzaW9ucy5tYXAoXG4gICAgICAoeyB0ZXh0LCBwYXJhbWV0ZXJUeXBlTmFtZXMgfSkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHRleHQsXG4gICAgICAgICAgcGFyYW1ldGVyTmFtZXM6IHRoaXMucGFyYW1ldGVyVHlwZU5hbWVzVG9QYXJhbWV0ZXJOYW1lcyhcbiAgICAgICAgICAgIHBhcmFtZXRlclR5cGVOYW1lc1xuICAgICAgICAgICksXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApXG4gICAgY29uc3QgY29tbWVudCA9XG4gICAgICAnV3JpdGUgY29kZSBoZXJlIHRoYXQgdHVybnMgdGhlIHBocmFzZSBhYm92ZSBpbnRvIGNvbmNyZXRlIGFjdGlvbnMnXG4gICAgY29uc3Qgc3RlcFBhcmFtZXRlck5hbWVzID0gcGlja2xlQXJndW1lbnRzLm1hcChcbiAgICAgIGJ1aWxkU3RlcEFyZ3VtZW50SXRlcmF0b3Ioe1xuICAgICAgICBkYXRhVGFibGU6ICgpID0+ICdkYXRhVGFibGUnLFxuICAgICAgICBkb2NTdHJpbmc6ICgpID0+ICdkb2NTdHJpbmcnLFxuICAgICAgfSlcbiAgICApXG4gICAgcmV0dXJuIHRoaXMuc25pcHBldFN5bnRheC5idWlsZCh7XG4gICAgICBjb21tZW50LFxuICAgICAgZ2VuZXJhdGVkRXhwcmVzc2lvbnM6IHVwZGF0ZWRHZW5lcmF0ZWRFeHByZXNzaW9ucyxcbiAgICAgIHN0ZXBQYXJhbWV0ZXJOYW1lcyxcbiAgICB9KVxuICB9XG59XG4iXX0=