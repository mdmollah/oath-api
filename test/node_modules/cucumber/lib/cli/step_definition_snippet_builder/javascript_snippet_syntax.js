'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CALLBACK_NAME = 'callback';

var JavaScriptSnippetSyntax = function () {
  function JavaScriptSnippetSyntax(snippetInterface) {
    (0, _classCallCheck3.default)(this, JavaScriptSnippetSyntax);

    this.snippetInterface = snippetInterface;
  }

  (0, _createClass3.default)(JavaScriptSnippetSyntax, [{
    key: 'build',
    value: function build(_ref) {
      var _this = this;

      var comment = _ref.comment,
          generatedExpressions = _ref.generatedExpressions,
          stepParameterNames = _ref.stepParameterNames;

      var functionKeyword = 'function ';
      if (this.snippetInterface === 'async-await') {
        functionKeyword = 'async ' + functionKeyword;
      } else if (this.snippetInterface === 'generator') {
        functionKeyword += '*';
      }

      var implementation = void 0;
      if (this.snippetInterface === 'callback') {
        implementation = CALLBACK_NAME + '(null, \'pending\');';
      } else {
        implementation = "return 'pending';";
      }

      var definitionChoices = generatedExpressions.map(function (generatedExpression, index) {
        var prefix = index === 0 ? '' : '// ';
        var allParameterNames = generatedExpression.parameterNames.concat(stepParameterNames);
        if (_this.snippetInterface === 'callback') {
          allParameterNames.push(CALLBACK_NAME);
        }
        return prefix + '{{keywordType}}(\'' + generatedExpression.text.replace(/'/g, "\\'") + '\', ' + functionKeyword + '(' + allParameterNames.join(', ') + ') {\n';
      });

      return definitionChoices.join('') + '  // ' + comment + '\n' + ('  ' + implementation + '\n') + '});';
    }
  }]);
  return JavaScriptSnippetSyntax;
}();

exports.default = JavaScriptSnippetSyntax;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGkvc3RlcF9kZWZpbml0aW9uX3NuaXBwZXRfYnVpbGRlci9qYXZhc2NyaXB0X3NuaXBwZXRfc3ludGF4LmpzIl0sIm5hbWVzIjpbIkNBTExCQUNLX05BTUUiLCJKYXZhU2NyaXB0U25pcHBldFN5bnRheCIsInNuaXBwZXRJbnRlcmZhY2UiLCJjb21tZW50IiwiZ2VuZXJhdGVkRXhwcmVzc2lvbnMiLCJzdGVwUGFyYW1ldGVyTmFtZXMiLCJmdW5jdGlvbktleXdvcmQiLCJpbXBsZW1lbnRhdGlvbiIsImRlZmluaXRpb25DaG9pY2VzIiwibWFwIiwiZ2VuZXJhdGVkRXhwcmVzc2lvbiIsImluZGV4IiwicHJlZml4IiwiYWxsUGFyYW1ldGVyTmFtZXMiLCJwYXJhbWV0ZXJOYW1lcyIsImNvbmNhdCIsInB1c2giLCJ0ZXh0IiwicmVwbGFjZSIsImpvaW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFNQSxnQkFBZ0IsVUFBdEI7O0lBRXFCQyx1QjtBQUNuQixtQ0FBWUMsZ0JBQVosRUFBOEI7QUFBQTs7QUFDNUIsU0FBS0EsZ0JBQUwsR0FBd0JBLGdCQUF4QjtBQUNEOzs7O2dDQUU0RDtBQUFBOztBQUFBLFVBQXJEQyxPQUFxRCxRQUFyREEsT0FBcUQ7QUFBQSxVQUE1Q0Msb0JBQTRDLFFBQTVDQSxvQkFBNEM7QUFBQSxVQUF0QkMsa0JBQXNCLFFBQXRCQSxrQkFBc0I7O0FBQzNELFVBQUlDLGtCQUFrQixXQUF0QjtBQUNBLFVBQUksS0FBS0osZ0JBQUwsS0FBMEIsYUFBOUIsRUFBNkM7QUFDM0NJLDBCQUFrQixXQUFXQSxlQUE3QjtBQUNELE9BRkQsTUFFTyxJQUFJLEtBQUtKLGdCQUFMLEtBQTBCLFdBQTlCLEVBQTJDO0FBQ2hESSwyQkFBbUIsR0FBbkI7QUFDRDs7QUFFRCxVQUFJQyx1QkFBSjtBQUNBLFVBQUksS0FBS0wsZ0JBQUwsS0FBMEIsVUFBOUIsRUFBMEM7QUFDeENLLHlCQUFvQlAsYUFBcEI7QUFDRCxPQUZELE1BRU87QUFDTE8seUJBQWlCLG1CQUFqQjtBQUNEOztBQUVELFVBQU1DLG9CQUFvQkoscUJBQXFCSyxHQUFyQixDQUN4QixVQUFDQyxtQkFBRCxFQUFzQkMsS0FBdEIsRUFBZ0M7QUFDOUIsWUFBTUMsU0FBU0QsVUFBVSxDQUFWLEdBQWMsRUFBZCxHQUFtQixLQUFsQztBQUNBLFlBQU1FLG9CQUFvQkgsb0JBQW9CSSxjQUFwQixDQUFtQ0MsTUFBbkMsQ0FDeEJWLGtCQUR3QixDQUExQjtBQUdBLFlBQUksTUFBS0gsZ0JBQUwsS0FBMEIsVUFBOUIsRUFBMEM7QUFDeENXLDRCQUFrQkcsSUFBbEIsQ0FBdUJoQixhQUF2QjtBQUNEO0FBQ0QsZUFBVVksTUFBViwwQkFBb0NGLG9CQUFvQk8sSUFBcEIsQ0FBeUJDLE9BQXpCLENBQ2xDLElBRGtDLEVBRWxDLEtBRmtDLENBQXBDLFlBR09aLGVBSFAsU0FHMEJPLGtCQUFrQk0sSUFBbEIsQ0FBdUIsSUFBdkIsQ0FIMUI7QUFJRCxPQWJ1QixDQUExQjs7QUFnQkEsYUFDS1gsa0JBQWtCVyxJQUFsQixDQUF1QixFQUF2QixDQUFILGFBQXFDaEIsT0FBckMsa0JBQ0tJLGNBREwsZ0JBREY7QUFLRDs7Ozs7a0JBekNrQk4sdUIiLCJmaWxlIjoiamF2YXNjcmlwdF9zbmlwcGV0X3N5bnRheC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IENBTExCQUNLX05BTUUgPSAnY2FsbGJhY2snXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEphdmFTY3JpcHRTbmlwcGV0U3ludGF4IHtcbiAgY29uc3RydWN0b3Ioc25pcHBldEludGVyZmFjZSkge1xuICAgIHRoaXMuc25pcHBldEludGVyZmFjZSA9IHNuaXBwZXRJbnRlcmZhY2VcbiAgfVxuXG4gIGJ1aWxkKHsgY29tbWVudCwgZ2VuZXJhdGVkRXhwcmVzc2lvbnMsIHN0ZXBQYXJhbWV0ZXJOYW1lcyB9KSB7XG4gICAgbGV0IGZ1bmN0aW9uS2V5d29yZCA9ICdmdW5jdGlvbiAnXG4gICAgaWYgKHRoaXMuc25pcHBldEludGVyZmFjZSA9PT0gJ2FzeW5jLWF3YWl0Jykge1xuICAgICAgZnVuY3Rpb25LZXl3b3JkID0gJ2FzeW5jICcgKyBmdW5jdGlvbktleXdvcmRcbiAgICB9IGVsc2UgaWYgKHRoaXMuc25pcHBldEludGVyZmFjZSA9PT0gJ2dlbmVyYXRvcicpIHtcbiAgICAgIGZ1bmN0aW9uS2V5d29yZCArPSAnKidcbiAgICB9XG5cbiAgICBsZXQgaW1wbGVtZW50YXRpb25cbiAgICBpZiAodGhpcy5zbmlwcGV0SW50ZXJmYWNlID09PSAnY2FsbGJhY2snKSB7XG4gICAgICBpbXBsZW1lbnRhdGlvbiA9IGAke0NBTExCQUNLX05BTUV9KG51bGwsICdwZW5kaW5nJyk7YFxuICAgIH0gZWxzZSB7XG4gICAgICBpbXBsZW1lbnRhdGlvbiA9IFwicmV0dXJuICdwZW5kaW5nJztcIlxuICAgIH1cblxuICAgIGNvbnN0IGRlZmluaXRpb25DaG9pY2VzID0gZ2VuZXJhdGVkRXhwcmVzc2lvbnMubWFwKFxuICAgICAgKGdlbmVyYXRlZEV4cHJlc3Npb24sIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHByZWZpeCA9IGluZGV4ID09PSAwID8gJycgOiAnLy8gJ1xuICAgICAgICBjb25zdCBhbGxQYXJhbWV0ZXJOYW1lcyA9IGdlbmVyYXRlZEV4cHJlc3Npb24ucGFyYW1ldGVyTmFtZXMuY29uY2F0KFxuICAgICAgICAgIHN0ZXBQYXJhbWV0ZXJOYW1lc1xuICAgICAgICApXG4gICAgICAgIGlmICh0aGlzLnNuaXBwZXRJbnRlcmZhY2UgPT09ICdjYWxsYmFjaycpIHtcbiAgICAgICAgICBhbGxQYXJhbWV0ZXJOYW1lcy5wdXNoKENBTExCQUNLX05BTUUpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAke3ByZWZpeH17e2tleXdvcmRUeXBlfX0oJyR7Z2VuZXJhdGVkRXhwcmVzc2lvbi50ZXh0LnJlcGxhY2UoXG4gICAgICAgICAgLycvZyxcbiAgICAgICAgICBcIlxcXFwnXCJcbiAgICAgICAgKX0nLCAke2Z1bmN0aW9uS2V5d29yZH0oJHthbGxQYXJhbWV0ZXJOYW1lcy5qb2luKCcsICcpfSkge1xcbmBcbiAgICAgIH1cbiAgICApXG5cbiAgICByZXR1cm4gKFxuICAgICAgYCR7ZGVmaW5pdGlvbkNob2ljZXMuam9pbignJyl9ICAvLyAke2NvbW1lbnR9XFxuYCArXG4gICAgICBgICAke2ltcGxlbWVudGF0aW9ufVxcbmAgK1xuICAgICAgYH0pO2BcbiAgICApXG4gIH1cbn1cbiJdfQ==