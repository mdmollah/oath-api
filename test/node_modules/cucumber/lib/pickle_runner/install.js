'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

var _fs = require('mz/fs');

var _fs2 = _interopRequireDefault(_fs);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _ = require('./');

var _request = require('request');

var _request2 = _interopRequireDefault(_request);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  var _ref = (0, _bluebird.coroutine)(function* () {
    var localPath = (0, _.getBinaryLocalPath)();

    yield _fsExtra2.default.ensureDir(_path2.default.dirname(localPath));
    var exists = true;
    try {
      yield _fs2.default.access(localPath);
    } catch (err) {
      if (err.code === 'ENOENT') {
        exists = false;
      } else {
        throw err;
      }
    }
    if (exists) {
      console.log('cucumber-pickle-runner ' + _.version + ' already installed');
      return;
    }

    console.log('Installing cucumber-pickle-runner ' + _.version + ' from ' + (0, _.getBinaryRemoteUrl)());
    yield new Promise(function (resolve, reject) {
      var remoteUrl = (0, _.getBinaryRemoteUrl)();
      _request2.default.get(remoteUrl).on('error', reject).on('response', function (response) {
        if (response.statusCode >= 400) {
          reject(new Error('Fetching ' + remoteUrl + ' responded with status ' + response.statusCode));
          return;
        }
        response.pipe(_fs2.default.createWriteStream(localPath, { mode: 493 })).on('error', reject).on('finish', resolve);
      });
    });
  });

  function install() {
    return _ref.apply(this, arguments);
  }

  return install;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9waWNrbGVfcnVubmVyL2luc3RhbGwuanMiXSwibmFtZXMiOlsibG9jYWxQYXRoIiwiZW5zdXJlRGlyIiwiZGlybmFtZSIsImV4aXN0cyIsImFjY2VzcyIsImVyciIsImNvZGUiLCJjb25zb2xlIiwibG9nIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZW1vdGVVcmwiLCJnZXQiLCJvbiIsInJlc3BvbnNlIiwic3RhdHVzQ29kZSIsIkVycm9yIiwicGlwZSIsImNyZWF0ZVdyaXRlU3RyZWFtIiwibW9kZSIsImluc3RhbGwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7Ozs7c0NBRWUsYUFBeUI7QUFDdEMsUUFBTUEsWUFBWSwyQkFBbEI7O0FBRUEsVUFBTSxrQkFBUUMsU0FBUixDQUFrQixlQUFLQyxPQUFMLENBQWFGLFNBQWIsQ0FBbEIsQ0FBTjtBQUNBLFFBQUlHLFNBQVMsSUFBYjtBQUNBLFFBQUk7QUFDRixZQUFNLGFBQUdDLE1BQUgsQ0FBVUosU0FBVixDQUFOO0FBQ0QsS0FGRCxDQUVFLE9BQU9LLEdBQVAsRUFBWTtBQUNaLFVBQUlBLElBQUlDLElBQUosS0FBYSxRQUFqQixFQUEyQjtBQUN6QkgsaUJBQVMsS0FBVDtBQUNELE9BRkQsTUFFTztBQUNMLGNBQU1FLEdBQU47QUFDRDtBQUNGO0FBQ0QsUUFBSUYsTUFBSixFQUFZO0FBQ1ZJLGNBQVFDLEdBQVI7QUFDQTtBQUNEOztBQUVERCxZQUFRQyxHQUFSLCtEQUN1RCwyQkFEdkQ7QUFHQSxVQUFNLElBQUlDLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFDckMsVUFBTUMsWUFBWSwyQkFBbEI7QUFDQSx3QkFDR0MsR0FESCxDQUNPRCxTQURQLEVBRUdFLEVBRkgsQ0FFTSxPQUZOLEVBRWVILE1BRmYsRUFHR0csRUFISCxDQUdNLFVBSE4sRUFHa0Isb0JBQVk7QUFDMUIsWUFBSUMsU0FBU0MsVUFBVCxJQUF1QixHQUEzQixFQUFnQztBQUM5QkwsaUJBQ0UsSUFBSU0sS0FBSixlQUNjTCxTQURkLCtCQUNpREcsU0FBU0MsVUFEMUQsQ0FERjtBQUtBO0FBQ0Q7QUFDREQsaUJBQ0dHLElBREgsQ0FDUSxhQUFHQyxpQkFBSCxDQUFxQm5CLFNBQXJCLEVBQWdDLEVBQUVvQixNQUFNLEdBQVIsRUFBaEMsQ0FEUixFQUVHTixFQUZILENBRU0sT0FGTixFQUVlSCxNQUZmLEVBR0dHLEVBSEgsQ0FHTSxRQUhOLEVBR2dCSixPQUhoQjtBQUlELE9BaEJIO0FBaUJELEtBbkJLLENBQU47QUFvQkQsRzs7V0ExQzZCVyxPOzs7O1NBQUFBLE8iLCJmaWxlIjoiaW5zdGFsbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdtei9mcydcbmltcG9ydCBmc0V4dHJhIGZyb20gJ2ZzLWV4dHJhJ1xuaW1wb3J0IHsgZ2V0QmluYXJ5TG9jYWxQYXRoLCBnZXRCaW5hcnlSZW1vdGVVcmwsIHZlcnNpb24gfSBmcm9tICcuLydcbmltcG9ydCByZXF1ZXN0IGZyb20gJ3JlcXVlc3QnXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBpbnN0YWxsKCkge1xuICBjb25zdCBsb2NhbFBhdGggPSBnZXRCaW5hcnlMb2NhbFBhdGgoKVxuXG4gIGF3YWl0IGZzRXh0cmEuZW5zdXJlRGlyKHBhdGguZGlybmFtZShsb2NhbFBhdGgpKVxuICBsZXQgZXhpc3RzID0gdHJ1ZVxuICB0cnkge1xuICAgIGF3YWl0IGZzLmFjY2Vzcyhsb2NhbFBhdGgpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChlcnIuY29kZSA9PT0gJ0VOT0VOVCcpIHtcbiAgICAgIGV4aXN0cyA9IGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGVyclxuICAgIH1cbiAgfVxuICBpZiAoZXhpc3RzKSB7XG4gICAgY29uc29sZS5sb2coYGN1Y3VtYmVyLXBpY2tsZS1ydW5uZXIgJHt2ZXJzaW9ufSBhbHJlYWR5IGluc3RhbGxlZGApXG4gICAgcmV0dXJuXG4gIH1cblxuICBjb25zb2xlLmxvZyhcbiAgICBgSW5zdGFsbGluZyBjdWN1bWJlci1waWNrbGUtcnVubmVyICR7dmVyc2lvbn0gZnJvbSAke2dldEJpbmFyeVJlbW90ZVVybCgpfWBcbiAgKVxuICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgcmVtb3RlVXJsID0gZ2V0QmluYXJ5UmVtb3RlVXJsKClcbiAgICByZXF1ZXN0XG4gICAgICAuZ2V0KHJlbW90ZVVybClcbiAgICAgIC5vbignZXJyb3InLCByZWplY3QpXG4gICAgICAub24oJ3Jlc3BvbnNlJywgcmVzcG9uc2UgPT4ge1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSA+PSA0MDApIHtcbiAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGBGZXRjaGluZyAke3JlbW90ZVVybH0gcmVzcG9uZGVkIHdpdGggc3RhdHVzICR7cmVzcG9uc2Uuc3RhdHVzQ29kZX1gXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHJlc3BvbnNlXG4gICAgICAgICAgLnBpcGUoZnMuY3JlYXRlV3JpdGVTdHJlYW0obG9jYWxQYXRoLCB7IG1vZGU6IDBvNzU1IH0pKVxuICAgICAgICAgIC5vbignZXJyb3InLCByZWplY3QpXG4gICAgICAgICAgLm9uKCdmaW5pc2gnLCByZXNvbHZlKVxuICAgICAgfSlcbiAgfSlcbn1cbiJdfQ==