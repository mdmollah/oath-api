'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = undefined;
exports.getBinaryLocalPath = getBinaryLocalPath;
exports.getBinaryRemoteUrl = getBinaryRemoteUrl;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var version = exports.version = 'v0.0.2';

function throwUnsupportedErrorMessage() {
  throw new Error('Unsupported operating system (' + process.platform + ') and system architecture (' + process.arch + ') combination. Please open an issue on cucumber-js.');
}

function getGoBinaryOperatingSystem() {
  switch (process.platform) {
    case 'darwin':
      return 'darwin';
    case 'freebsd':
      return 'freebsd';
    case 'linux':
      return 'linux';
    case 'win32':
      return 'windows';
    case 'openbsd':
      return 'openbsd';
    default:
      throwUnsupportedErrorMessage();
  }
}

function getGoBinaryArchitecture() {
  // Special ckeck on windows machines
  if (process.env.PROCESSOR_ARCHITECTURE === 'AMD64' || process.env.PROCESSOR_ARCHITEW6432 === 'AMD64') {
    return 'amd64';
  }
  switch (process.arch) {
    case 'arm':
      return 'arm';
    case 'ia32':
    case 'x32':
      return '386';
    case 'x64':
      return 'amd64';
    case 'mips':
      return 'mips';
    case 'mipsel':
      return 'mipsle';
    case 's390x':
      return 's390x';
    default:
      throwUnsupportedErrorMessage();
  }
}

function getBinaryLocalPath() {
  return _path2.default.join(_os2.default.homedir(), 'cucumber', 'pickle-runner', version);
}

function getBinaryRemoteUrl() {
  var urlPrefix = 'https://github.com/cucumber/cucumber-pickle-runner/releases/download';
  var os = getGoBinaryOperatingSystem();
  var arch = getGoBinaryArchitecture();
  var binaryName = 'cucumber-pickle-runner-' + os + '-' + arch;
  if (os === 'windows') {
    binaryName += '.exe';
  }
  return urlPrefix + '/' + version + '/' + binaryName;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9waWNrbGVfcnVubmVyL2luZGV4LmpzIl0sIm5hbWVzIjpbImdldEJpbmFyeUxvY2FsUGF0aCIsImdldEJpbmFyeVJlbW90ZVVybCIsInZlcnNpb24iLCJ0aHJvd1Vuc3VwcG9ydGVkRXJyb3JNZXNzYWdlIiwiRXJyb3IiLCJwcm9jZXNzIiwicGxhdGZvcm0iLCJhcmNoIiwiZ2V0R29CaW5hcnlPcGVyYXRpbmdTeXN0ZW0iLCJnZXRHb0JpbmFyeUFyY2hpdGVjdHVyZSIsImVudiIsIlBST0NFU1NPUl9BUkNISVRFQ1RVUkUiLCJQUk9DRVNTT1JfQVJDSElURVc2NDMyIiwiam9pbiIsImhvbWVkaXIiLCJ1cmxQcmVmaXgiLCJvcyIsImJpbmFyeU5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7OztRQXVEZ0JBLGtCLEdBQUFBLGtCO1FBSUFDLGtCLEdBQUFBLGtCOztBQTNEaEI7Ozs7QUFDQTs7Ozs7O0FBRU8sSUFBTUMsNEJBQVUsUUFBaEI7O0FBRVAsU0FBU0MsNEJBQVQsR0FBd0M7QUFDdEMsUUFBTSxJQUFJQyxLQUFKLG9DQUM2QkMsUUFBUUMsUUFEckMsbUNBQzJFRCxRQUFRRSxJQURuRix5REFBTjtBQUdEOztBQUVELFNBQVNDLDBCQUFULEdBQXNDO0FBQ3BDLFVBQVFILFFBQVFDLFFBQWhCO0FBQ0UsU0FBSyxRQUFMO0FBQ0UsYUFBTyxRQUFQO0FBQ0YsU0FBSyxTQUFMO0FBQ0UsYUFBTyxTQUFQO0FBQ0YsU0FBSyxPQUFMO0FBQ0UsYUFBTyxPQUFQO0FBQ0YsU0FBSyxPQUFMO0FBQ0UsYUFBTyxTQUFQO0FBQ0YsU0FBSyxTQUFMO0FBQ0UsYUFBTyxTQUFQO0FBQ0Y7QUFDRUg7QUFaSjtBQWNEOztBQUVELFNBQVNNLHVCQUFULEdBQW1DO0FBQ2pDO0FBQ0EsTUFDRUosUUFBUUssR0FBUixDQUFZQyxzQkFBWixLQUF1QyxPQUF2QyxJQUNBTixRQUFRSyxHQUFSLENBQVlFLHNCQUFaLEtBQXVDLE9BRnpDLEVBR0U7QUFDQSxXQUFPLE9BQVA7QUFDRDtBQUNELFVBQVFQLFFBQVFFLElBQWhCO0FBQ0UsU0FBSyxLQUFMO0FBQ0UsYUFBTyxLQUFQO0FBQ0YsU0FBSyxNQUFMO0FBQ0EsU0FBSyxLQUFMO0FBQ0UsYUFBTyxLQUFQO0FBQ0YsU0FBSyxLQUFMO0FBQ0UsYUFBTyxPQUFQO0FBQ0YsU0FBSyxNQUFMO0FBQ0UsYUFBTyxNQUFQO0FBQ0YsU0FBSyxRQUFMO0FBQ0UsYUFBTyxRQUFQO0FBQ0YsU0FBSyxPQUFMO0FBQ0UsYUFBTyxPQUFQO0FBQ0Y7QUFDRUo7QUFmSjtBQWlCRDs7QUFFTSxTQUFTSCxrQkFBVCxHQUE4QjtBQUNuQyxTQUFPLGVBQUthLElBQUwsQ0FBVSxhQUFHQyxPQUFILEVBQVYsRUFBd0IsVUFBeEIsRUFBb0MsZUFBcEMsRUFBcURaLE9BQXJELENBQVA7QUFDRDs7QUFFTSxTQUFTRCxrQkFBVCxHQUE4QjtBQUNuQyxNQUFNYyxZQUNKLHNFQURGO0FBRUEsTUFBTUMsS0FBS1IsNEJBQVg7QUFDQSxNQUFNRCxPQUFPRSx5QkFBYjtBQUNBLE1BQUlRLHlDQUF1Q0QsRUFBdkMsU0FBNkNULElBQWpEO0FBQ0EsTUFBSVMsT0FBTyxTQUFYLEVBQXNCO0FBQ3BCQyxrQkFBYyxNQUFkO0FBQ0Q7QUFDRCxTQUFVRixTQUFWLFNBQXVCYixPQUF2QixTQUFrQ2UsVUFBbEM7QUFDRCIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgb3MgZnJvbSAnb3MnXG5cbmV4cG9ydCBjb25zdCB2ZXJzaW9uID0gJ3YwLjAuMidcblxuZnVuY3Rpb24gdGhyb3dVbnN1cHBvcnRlZEVycm9yTWVzc2FnZSgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgIGBVbnN1cHBvcnRlZCBvcGVyYXRpbmcgc3lzdGVtICgke3Byb2Nlc3MucGxhdGZvcm19KSBhbmQgc3lzdGVtIGFyY2hpdGVjdHVyZSAoJHtwcm9jZXNzLmFyY2h9KSBjb21iaW5hdGlvbi4gUGxlYXNlIG9wZW4gYW4gaXNzdWUgb24gY3VjdW1iZXItanMuYFxuICApXG59XG5cbmZ1bmN0aW9uIGdldEdvQmluYXJ5T3BlcmF0aW5nU3lzdGVtKCkge1xuICBzd2l0Y2ggKHByb2Nlc3MucGxhdGZvcm0pIHtcbiAgICBjYXNlICdkYXJ3aW4nOlxuICAgICAgcmV0dXJuICdkYXJ3aW4nXG4gICAgY2FzZSAnZnJlZWJzZCc6XG4gICAgICByZXR1cm4gJ2ZyZWVic2QnXG4gICAgY2FzZSAnbGludXgnOlxuICAgICAgcmV0dXJuICdsaW51eCdcbiAgICBjYXNlICd3aW4zMic6XG4gICAgICByZXR1cm4gJ3dpbmRvd3MnXG4gICAgY2FzZSAnb3BlbmJzZCc6XG4gICAgICByZXR1cm4gJ29wZW5ic2QnXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93VW5zdXBwb3J0ZWRFcnJvck1lc3NhZ2UoKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldEdvQmluYXJ5QXJjaGl0ZWN0dXJlKCkge1xuICAvLyBTcGVjaWFsIGNrZWNrIG9uIHdpbmRvd3MgbWFjaGluZXNcbiAgaWYgKFxuICAgIHByb2Nlc3MuZW52LlBST0NFU1NPUl9BUkNISVRFQ1RVUkUgPT09ICdBTUQ2NCcgfHxcbiAgICBwcm9jZXNzLmVudi5QUk9DRVNTT1JfQVJDSElURVc2NDMyID09PSAnQU1ENjQnXG4gICkge1xuICAgIHJldHVybiAnYW1kNjQnXG4gIH1cbiAgc3dpdGNoIChwcm9jZXNzLmFyY2gpIHtcbiAgICBjYXNlICdhcm0nOlxuICAgICAgcmV0dXJuICdhcm0nXG4gICAgY2FzZSAnaWEzMic6XG4gICAgY2FzZSAneDMyJzpcbiAgICAgIHJldHVybiAnMzg2J1xuICAgIGNhc2UgJ3g2NCc6XG4gICAgICByZXR1cm4gJ2FtZDY0J1xuICAgIGNhc2UgJ21pcHMnOlxuICAgICAgcmV0dXJuICdtaXBzJ1xuICAgIGNhc2UgJ21pcHNlbCc6XG4gICAgICByZXR1cm4gJ21pcHNsZSdcbiAgICBjYXNlICdzMzkweCc6XG4gICAgICByZXR1cm4gJ3MzOTB4J1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvd1Vuc3VwcG9ydGVkRXJyb3JNZXNzYWdlKClcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmluYXJ5TG9jYWxQYXRoKCkge1xuICByZXR1cm4gcGF0aC5qb2luKG9zLmhvbWVkaXIoKSwgJ2N1Y3VtYmVyJywgJ3BpY2tsZS1ydW5uZXInLCB2ZXJzaW9uKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmluYXJ5UmVtb3RlVXJsKCkge1xuICBjb25zdCB1cmxQcmVmaXggPVxuICAgICdodHRwczovL2dpdGh1Yi5jb20vY3VjdW1iZXIvY3VjdW1iZXItcGlja2xlLXJ1bm5lci9yZWxlYXNlcy9kb3dubG9hZCdcbiAgY29uc3Qgb3MgPSBnZXRHb0JpbmFyeU9wZXJhdGluZ1N5c3RlbSgpXG4gIGNvbnN0IGFyY2ggPSBnZXRHb0JpbmFyeUFyY2hpdGVjdHVyZSgpXG4gIGxldCBiaW5hcnlOYW1lID0gYGN1Y3VtYmVyLXBpY2tsZS1ydW5uZXItJHtvc30tJHthcmNofWBcbiAgaWYgKG9zID09PSAnd2luZG93cycpIHtcbiAgICBiaW5hcnlOYW1lICs9ICcuZXhlJ1xuICB9XG4gIHJldHVybiBgJHt1cmxQcmVmaXh9LyR7dmVyc2lvbn0vJHtiaW5hcnlOYW1lfWBcbn1cbiJdfQ==